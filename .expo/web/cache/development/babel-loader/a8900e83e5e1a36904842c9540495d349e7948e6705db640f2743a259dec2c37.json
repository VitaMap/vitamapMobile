{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"C:\\\\Users\\\\diket\\\\vitamapMobile\\\\node_modules\\\\react-native\\\\Libraries\\\\Inspector\\\\NetworkOverlay.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScrollView = require('../Components/ScrollView/ScrollView');\nconst TouchableHighlight = require('../Components/Touchable/TouchableHighlight');\nconst View = require('../Components/View/View');\nconst FlatList = require('../Lists/FlatList');\nconst XHRInterceptor = require('../Network/XHRInterceptor');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst Text = require('../Text/Text');\nconst WebSocketInterceptor = require('../WebSocket/WebSocketInterceptor');\nconst React = require('react');\nconst LISTVIEW_CELL_HEIGHT = 15;\nlet nextXHRId = 0;\nfunction getStringByValue(value) {\n  if (value === undefined) {\n    return 'undefined';\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value);\n  }\n  if (typeof value === 'string' && value.length > 500) {\n    return String(value).slice(0, 500).concat('\\n***TRUNCATED TO 500 CHARACTERS***');\n  }\n  return value;\n}\nfunction getTypeShortName(type) {\n  if (type === 'XMLHttpRequest') {\n    return 'XHR';\n  } else if (type === 'WebSocket') {\n    return 'WS';\n  }\n  return '';\n}\nfunction keyExtractor(request) {\n  return String(request.id);\n}\nclass NetworkOverlay extends React.Component {\n  _requestsListViewScrollMetrics = {\n    offset: 0,\n    visibleLength: 0,\n    contentLength: 0\n  };\n  _socketIdMap = {};\n  _xhrIdMap = {};\n  state = {\n    detailRowId: null,\n    requests: []\n  };\n  _enableXHRInterception() {\n    if (XHRInterceptor.isInterceptorEnabled()) {\n      return;\n    }\n    XHRInterceptor.setOpenCallback((method, url, xhr) => {\n      xhr._index = nextXHRId++;\n      const xhrIndex = this.state.requests.length;\n      this._xhrIdMap[xhr._index] = xhrIndex;\n      const _xhr = {\n        id: xhrIndex,\n        type: 'XMLHttpRequest',\n        method: method,\n        url: url\n      };\n      this.setState({\n        requests: this.state.requests.concat(_xhr)\n      }, this._indicateAdditionalRequests);\n    });\n    XHRInterceptor.setRequestHeaderCallback((header, value, xhr) => {\n      const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n      if (xhrIndex === -1) {\n        return;\n      }\n      this.setState(({\n        requests\n      }) => {\n        const networkRequestInfo = requests[xhrIndex];\n        if (!networkRequestInfo.requestHeaders) {\n          networkRequestInfo.requestHeaders = {};\n        }\n        networkRequestInfo.requestHeaders[header] = value;\n        return {\n          requests\n        };\n      });\n    });\n    XHRInterceptor.setSendCallback((data, xhr) => {\n      const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n      if (xhrIndex === -1) {\n        return;\n      }\n      this.setState(({\n        requests\n      }) => {\n        const networkRequestInfo = requests[xhrIndex];\n        networkRequestInfo.dataSent = data;\n        return {\n          requests\n        };\n      });\n    });\n    XHRInterceptor.setHeaderReceivedCallback((type, size, responseHeaders, xhr) => {\n      const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n      if (xhrIndex === -1) {\n        return;\n      }\n      this.setState(({\n        requests\n      }) => {\n        const networkRequestInfo = requests[xhrIndex];\n        networkRequestInfo.responseContentType = type;\n        networkRequestInfo.responseSize = size;\n        networkRequestInfo.responseHeaders = responseHeaders;\n        return {\n          requests\n        };\n      });\n    });\n    XHRInterceptor.setResponseCallback((status, timeout, response, responseURL, responseType, xhr) => {\n      const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n      if (xhrIndex === -1) {\n        return;\n      }\n      this.setState(({\n        requests\n      }) => {\n        const networkRequestInfo = requests[xhrIndex];\n        networkRequestInfo.status = status;\n        networkRequestInfo.timeout = timeout;\n        networkRequestInfo.response = response;\n        networkRequestInfo.responseURL = responseURL;\n        networkRequestInfo.responseType = responseType;\n        return {\n          requests\n        };\n      });\n    });\n    XHRInterceptor.enableInterception();\n  }\n  _enableWebSocketInterception() {\n    if (WebSocketInterceptor.isInterceptorEnabled()) {\n      return;\n    }\n    WebSocketInterceptor.setConnectCallback((url, protocols, options, socketId) => {\n      const socketIndex = this.state.requests.length;\n      this._socketIdMap[socketId] = socketIndex;\n      const _webSocket = {\n        id: socketIndex,\n        type: 'WebSocket',\n        url: url,\n        protocols: protocols\n      };\n      this.setState({\n        requests: this.state.requests.concat(_webSocket)\n      }, this._indicateAdditionalRequests);\n    });\n    WebSocketInterceptor.setCloseCallback((statusCode, closeReason, socketId) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n      if (statusCode !== null && closeReason !== null) {\n        this.setState(({\n          requests\n        }) => {\n          const networkRequestInfo = requests[socketIndex];\n          networkRequestInfo.status = statusCode;\n          networkRequestInfo.closeReason = closeReason;\n          return {\n            requests\n          };\n        });\n      }\n    });\n    WebSocketInterceptor.setSendCallback((data, socketId) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n      this.setState(({\n        requests\n      }) => {\n        const networkRequestInfo = requests[socketIndex];\n        if (!networkRequestInfo.messages) {\n          networkRequestInfo.messages = '';\n        }\n        networkRequestInfo.messages += 'Sent: ' + JSON.stringify(data) + '\\n';\n        return {\n          requests\n        };\n      });\n    });\n    WebSocketInterceptor.setOnMessageCallback((socketId, message) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n      this.setState(({\n        requests\n      }) => {\n        const networkRequestInfo = requests[socketIndex];\n        if (!networkRequestInfo.messages) {\n          networkRequestInfo.messages = '';\n        }\n        networkRequestInfo.messages += 'Received: ' + JSON.stringify(message) + '\\n';\n        return {\n          requests\n        };\n      });\n    });\n    WebSocketInterceptor.setOnCloseCallback((socketId, message) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n      this.setState(({\n        requests\n      }) => {\n        const networkRequestInfo = requests[socketIndex];\n        networkRequestInfo.serverClose = message;\n        return {\n          requests\n        };\n      });\n    });\n    WebSocketInterceptor.setOnErrorCallback((socketId, message) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n      this.setState(({\n        requests\n      }) => {\n        const networkRequestInfo = requests[socketIndex];\n        networkRequestInfo.serverError = message;\n        return {\n          requests\n        };\n      });\n    });\n    WebSocketInterceptor.enableInterception();\n  }\n  componentDidMount() {\n    this._enableXHRInterception();\n    this._enableWebSocketInterception();\n  }\n  componentWillUnmount() {\n    XHRInterceptor.disableInterception();\n    WebSocketInterceptor.disableInterception();\n  }\n  _renderItem = ({\n    item,\n    index\n  }) => {\n    const tableRowViewStyle = [styles.tableRow, index % 2 === 1 ? styles.tableRowOdd : styles.tableRowEven, index === this.state.detailRowId && styles.tableRowPressed];\n    const urlCellViewStyle = styles.urlCellView;\n    const methodCellViewStyle = styles.methodCellView;\n    return _jsxDEV(TouchableHighlight, {\n      onPress: () => {\n        this._pressRow(index);\n      },\n      children: _jsxDEV(View, {\n        children: _jsxDEV(View, {\n          style: tableRowViewStyle,\n          children: [_jsxDEV(View, {\n            style: urlCellViewStyle,\n            children: _jsxDEV(Text, {\n              style: styles.cellText,\n              numberOfLines: 1,\n              children: item.url\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this), _jsxDEV(View, {\n            style: methodCellViewStyle,\n            children: _jsxDEV(Text, {\n              style: styles.cellText,\n              numberOfLines: 1,\n              children: getTypeShortName(item.type)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this);\n  };\n  _renderItemDetail(id) {\n    const requestItem = this.state.requests[id];\n    const details = Object.keys(requestItem).map(key => {\n      if (key === 'id') {\n        return;\n      }\n      return _jsxDEV(View, {\n        style: styles.detailViewRow,\n        children: [_jsxDEV(Text, {\n          style: [styles.detailViewText, styles.detailKeyCellView],\n          children: key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this), _jsxDEV(Text, {\n          style: [styles.detailViewText, styles.detailValueCellView],\n          children: getStringByValue(requestItem[key])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this);\n    });\n    return _jsxDEV(View, {\n      children: [_jsxDEV(TouchableHighlight, {\n        style: styles.closeButton,\n        onPress: this._closeButtonClicked,\n        children: _jsxDEV(View, {\n          children: _jsxDEV(Text, {\n            style: styles.closeButtonText,\n            children: \"v\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this), _jsxDEV(ScrollView, {\n        style: styles.detailScrollView,\n        ref: scrollRef => this._detailScrollView = scrollRef,\n        children: details\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this);\n  }\n  _indicateAdditionalRequests = () => {\n    if (this._requestsListView) {\n      const distanceFromEndThreshold = LISTVIEW_CELL_HEIGHT * 2;\n      const {\n        offset,\n        visibleLength,\n        contentLength\n      } = this._requestsListViewScrollMetrics;\n      const distanceFromEnd = contentLength - visibleLength - offset;\n      const isCloseToEnd = distanceFromEnd <= distanceFromEndThreshold;\n      if (isCloseToEnd) {\n        this._requestsListView.scrollToEnd();\n      } else {\n        this._requestsListView.flashScrollIndicators();\n      }\n    }\n  };\n  _captureRequestsListView = listRef => {\n    this._requestsListView = listRef;\n  };\n  _requestsListViewOnScroll = e => {\n    this._requestsListViewScrollMetrics.offset = e.nativeEvent.contentOffset.y;\n    this._requestsListViewScrollMetrics.visibleLength = e.nativeEvent.layoutMeasurement.height;\n    this._requestsListViewScrollMetrics.contentLength = e.nativeEvent.contentSize.height;\n  };\n  _pressRow(rowId) {\n    this.setState({\n      detailRowId: rowId\n    }, this._scrollDetailToTop);\n  }\n  _scrollDetailToTop = () => {\n    if (this._detailScrollView) {\n      this._detailScrollView.scrollTo({\n        y: 0,\n        animated: false\n      });\n    }\n  };\n  _closeButtonClicked = () => {\n    this.setState({\n      detailRowId: null\n    });\n  };\n  _getRequestIndexByXHRID(index) {\n    if (index === undefined) {\n      return -1;\n    }\n    const xhrIndex = this._xhrIdMap[index];\n    if (xhrIndex === undefined) {\n      return -1;\n    } else {\n      return xhrIndex;\n    }\n  }\n  render() {\n    const {\n      requests,\n      detailRowId\n    } = this.state;\n    return _jsxDEV(View, {\n      style: styles.container,\n      children: [detailRowId != null && this._renderItemDetail(detailRowId), _jsxDEV(View, {\n        style: styles.listViewTitle,\n        children: requests.length > 0 && _jsxDEV(View, {\n          style: styles.tableRow,\n          children: [_jsxDEV(View, {\n            style: styles.urlTitleCellView,\n            children: _jsxDEV(Text, {\n              style: styles.cellText,\n              numberOfLines: 1,\n              children: \"URL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 15\n          }, this), _jsxDEV(View, {\n            style: styles.methodTitleCellView,\n            children: _jsxDEV(Text, {\n              style: styles.cellText,\n              numberOfLines: 1,\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }, this), _jsxDEV(FlatList, {\n        ref: this._captureRequestsListView,\n        onScroll: this._requestsListViewOnScroll,\n        style: styles.listView,\n        data: requests,\n        renderItem: this._renderItem,\n        keyExtractor: keyExtractor,\n        extraData: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 7\n    }, this);\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 10,\n    paddingBottom: 10,\n    paddingLeft: 5,\n    paddingRight: 5\n  },\n  listViewTitle: {\n    height: 20\n  },\n  listView: {\n    flex: 1,\n    height: 60\n  },\n  tableRow: {\n    flexDirection: 'row',\n    flex: 1,\n    height: LISTVIEW_CELL_HEIGHT\n  },\n  tableRowEven: {\n    backgroundColor: '#555'\n  },\n  tableRowOdd: {\n    backgroundColor: '#000'\n  },\n  tableRowPressed: {\n    backgroundColor: '#3B5998'\n  },\n  cellText: {\n    color: 'white',\n    fontSize: 12\n  },\n  methodTitleCellView: {\n    height: 18,\n    borderColor: '#DCD7CD',\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderRightWidth: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#444',\n    flex: 1\n  },\n  urlTitleCellView: {\n    height: 18,\n    borderColor: '#DCD7CD',\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    justifyContent: 'center',\n    backgroundColor: '#444',\n    flex: 5,\n    paddingLeft: 3\n  },\n  methodCellView: {\n    height: 15,\n    borderColor: '#DCD7CD',\n    borderRightWidth: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1\n  },\n  urlCellView: {\n    height: 15,\n    borderColor: '#DCD7CD',\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    justifyContent: 'center',\n    flex: 5,\n    paddingLeft: 3\n  },\n  detailScrollView: {\n    flex: 1,\n    height: 180,\n    marginTop: 5,\n    marginBottom: 5\n  },\n  detailKeyCellView: {\n    flex: 1.3\n  },\n  detailValueCellView: {\n    flex: 2\n  },\n  detailViewRow: {\n    flexDirection: 'row',\n    paddingHorizontal: 3\n  },\n  detailViewText: {\n    color: 'white',\n    fontSize: 11\n  },\n  closeButtonText: {\n    color: 'white',\n    fontSize: 10\n  },\n  closeButton: {\n    marginTop: 5,\n    backgroundColor: '#888',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nmodule.exports = NetworkOverlay;","map":{"version":3,"names":["_jsxFileName","jsxDEV","_jsxDEV","ScrollView","require","TouchableHighlight","View","FlatList","XHRInterceptor","StyleSheet","Text","WebSocketInterceptor","React","LISTVIEW_CELL_HEIGHT","nextXHRId","getStringByValue","value","undefined","JSON","stringify","length","String","slice","concat","getTypeShortName","type","keyExtractor","request","id","NetworkOverlay","Component","_requestsListViewScrollMetrics","offset","visibleLength","contentLength","_socketIdMap","_xhrIdMap","state","detailRowId","requests","_enableXHRInterception","isInterceptorEnabled","setOpenCallback","method","url","xhr","_index","xhrIndex","_xhr","setState","_indicateAdditionalRequests","setRequestHeaderCallback","header","_getRequestIndexByXHRID","networkRequestInfo","requestHeaders","setSendCallback","data","dataSent","setHeaderReceivedCallback","size","responseHeaders","responseContentType","responseSize","setResponseCallback","status","timeout","response","responseURL","responseType","enableInterception","_enableWebSocketInterception","setConnectCallback","protocols","options","socketId","socketIndex","_webSocket","setCloseCallback","statusCode","closeReason","messages","setOnMessageCallback","message","setOnCloseCallback","serverClose","setOnErrorCallback","serverError","componentDidMount","componentWillUnmount","disableInterception","_renderItem","item","index","tableRowViewStyle","styles","tableRow","tableRowOdd","tableRowEven","tableRowPressed","urlCellViewStyle","urlCellView","methodCellViewStyle","methodCellView","onPress","_pressRow","children","style","cellText","numberOfLines","fileName","lineNumber","columnNumber","_renderItemDetail","requestItem","details","Object","keys","map","key","detailViewRow","detailViewText","detailKeyCellView","detailValueCellView","closeButton","_closeButtonClicked","closeButtonText","detailScrollView","ref","scrollRef","_detailScrollView","_requestsListView","distanceFromEndThreshold","distanceFromEnd","isCloseToEnd","scrollToEnd","flashScrollIndicators","_captureRequestsListView","listRef","_requestsListViewOnScroll","e","nativeEvent","contentOffset","y","layoutMeasurement","height","contentSize","rowId","_scrollDetailToTop","scrollTo","animated","render","container","listViewTitle","urlTitleCellView","methodTitleCellView","onScroll","listView","renderItem","extraData","create","paddingTop","paddingBottom","paddingLeft","paddingRight","flex","flexDirection","backgroundColor","color","fontSize","borderColor","borderTopWidth","borderBottomWidth","borderRightWidth","alignItems","justifyContent","borderLeftWidth","marginTop","marginBottom","paddingHorizontal","module","exports"],"sources":["C:/Users/diket/vitamapMobile/node_modules/react-native/Libraries/Inspector/NetworkOverlay.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport type {RenderItemProps} from '@react-native/virtualized-lists';\n\nconst ScrollView = require('../Components/ScrollView/ScrollView');\nconst TouchableHighlight = require('../Components/Touchable/TouchableHighlight');\nconst View = require('../Components/View/View');\nconst FlatList = require('../Lists/FlatList');\nconst XHRInterceptor = require('../Network/XHRInterceptor');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst Text = require('../Text/Text');\nconst WebSocketInterceptor = require('../WebSocket/WebSocketInterceptor');\nconst React = require('react');\n\nconst LISTVIEW_CELL_HEIGHT = 15;\n\n// Global id for the intercepted XMLHttpRequest objects.\nlet nextXHRId = 0;\n\ntype NetworkRequestInfo = {\n  id: number,\n  type?: string,\n  url?: string,\n  method?: string,\n  status?: number,\n  dataSent?: any,\n  responseContentType?: string,\n  responseSize?: number,\n  requestHeaders?: Object,\n  responseHeaders?: string,\n  response?: Object | string,\n  responseURL?: string,\n  responseType?: string,\n  timeout?: number,\n  closeReason?: string,\n  messages?: string,\n  serverClose?: Object,\n  serverError?: Object,\n  ...\n};\n\ntype Props = $ReadOnly<{||}>;\ntype State = {|\n  detailRowId: ?number,\n  requests: Array<NetworkRequestInfo>,\n|};\n\nfunction getStringByValue(value: any): string {\n  if (value === undefined) {\n    return 'undefined';\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value);\n  }\n  if (typeof value === 'string' && value.length > 500) {\n    return String(value)\n      .slice(0, 500)\n      .concat('\\n***TRUNCATED TO 500 CHARACTERS***');\n  }\n  return value;\n}\n\nfunction getTypeShortName(type: any): string {\n  if (type === 'XMLHttpRequest') {\n    return 'XHR';\n  } else if (type === 'WebSocket') {\n    return 'WS';\n  }\n\n  return '';\n}\n\nfunction keyExtractor(request: NetworkRequestInfo): string {\n  return String(request.id);\n}\n\n/**\n * Show all the intercepted network requests over the InspectorPanel.\n */\nclass NetworkOverlay extends React.Component<Props, State> {\n  _requestsListView: ?React.ElementRef<Class<FlatList<NetworkRequestInfo>>>;\n  _detailScrollView: ?React.ElementRef<typeof ScrollView>;\n\n  // Metrics are used to decide when if the request list should be sticky, and\n  // scroll to the bottom as new network requests come in, or if the user has\n  // intentionally scrolled away from the bottom - to instead flash the scroll bar\n  // and keep the current position\n  _requestsListViewScrollMetrics: {\n    contentLength: number,\n    offset: number,\n    visibleLength: number,\n  } = {\n    offset: 0,\n    visibleLength: 0,\n    contentLength: 0,\n  };\n\n  // Map of `socketId` -> `index in `this.state.requests`.\n  _socketIdMap: {[string]: number} = {};\n  // Map of `xhr._index` -> `index in `this.state.requests`.\n  _xhrIdMap: {[key: number]: number, ...} = {};\n\n  state: State = {\n    detailRowId: null,\n    requests: [],\n  };\n\n  _enableXHRInterception(): void {\n    if (XHRInterceptor.isInterceptorEnabled()) {\n      return;\n    }\n    // Show the XHR request item in listView as soon as it was opened.\n    XHRInterceptor.setOpenCallback((method, url, xhr) => {\n      // Generate a global id for each intercepted xhr object, add this id\n      // to the xhr object as a private `_index` property to identify it,\n      // so that we can distinguish different xhr objects in callbacks.\n      xhr._index = nextXHRId++;\n      const xhrIndex = this.state.requests.length;\n      this._xhrIdMap[xhr._index] = xhrIndex;\n\n      const _xhr: NetworkRequestInfo = {\n        id: xhrIndex,\n        type: 'XMLHttpRequest',\n        method: method,\n        url: url,\n      };\n      this.setState(\n        {\n          requests: this.state.requests.concat(_xhr),\n        },\n        this._indicateAdditionalRequests,\n      );\n    });\n\n    XHRInterceptor.setRequestHeaderCallback((header, value, xhr) => {\n      const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n      if (xhrIndex === -1) {\n        return;\n      }\n\n      this.setState(({requests}) => {\n        const networkRequestInfo = requests[xhrIndex];\n        if (!networkRequestInfo.requestHeaders) {\n          networkRequestInfo.requestHeaders = ({}: {[any]: any});\n        }\n        networkRequestInfo.requestHeaders[header] = value;\n        return {requests};\n      });\n    });\n\n    XHRInterceptor.setSendCallback((data, xhr) => {\n      const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n      if (xhrIndex === -1) {\n        return;\n      }\n\n      this.setState(({requests}) => {\n        const networkRequestInfo = requests[xhrIndex];\n        networkRequestInfo.dataSent = data;\n        return {requests};\n      });\n    });\n\n    XHRInterceptor.setHeaderReceivedCallback(\n      (type, size, responseHeaders, xhr) => {\n        const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n        if (xhrIndex === -1) {\n          return;\n        }\n\n        this.setState(({requests}) => {\n          const networkRequestInfo = requests[xhrIndex];\n          networkRequestInfo.responseContentType = type;\n          networkRequestInfo.responseSize = size;\n          networkRequestInfo.responseHeaders = responseHeaders;\n          return {requests};\n        });\n      },\n    );\n\n    XHRInterceptor.setResponseCallback(\n      (status, timeout, response, responseURL, responseType, xhr) => {\n        const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n        if (xhrIndex === -1) {\n          return;\n        }\n\n        this.setState(({requests}) => {\n          const networkRequestInfo = requests[xhrIndex];\n          networkRequestInfo.status = status;\n          networkRequestInfo.timeout = timeout;\n          networkRequestInfo.response = response;\n          networkRequestInfo.responseURL = responseURL;\n          networkRequestInfo.responseType = responseType;\n\n          return {requests};\n        });\n      },\n    );\n\n    // Fire above callbacks.\n    XHRInterceptor.enableInterception();\n  }\n\n  _enableWebSocketInterception(): void {\n    if (WebSocketInterceptor.isInterceptorEnabled()) {\n      return;\n    }\n    // Show the WebSocket request item in listView when 'connect' is called.\n    WebSocketInterceptor.setConnectCallback(\n      (url, protocols, options, socketId) => {\n        const socketIndex = this.state.requests.length;\n        this._socketIdMap[socketId] = socketIndex;\n        const _webSocket: NetworkRequestInfo = {\n          id: socketIndex,\n          type: 'WebSocket',\n          url: url,\n          protocols: protocols,\n        };\n        this.setState(\n          {\n            requests: this.state.requests.concat(_webSocket),\n          },\n          this._indicateAdditionalRequests,\n        );\n      },\n    );\n\n    WebSocketInterceptor.setCloseCallback(\n      (statusCode, closeReason, socketId) => {\n        const socketIndex = this._socketIdMap[socketId];\n        if (socketIndex === undefined) {\n          return;\n        }\n        if (statusCode !== null && closeReason !== null) {\n          this.setState(({requests}) => {\n            const networkRequestInfo = requests[socketIndex];\n            networkRequestInfo.status = statusCode;\n            networkRequestInfo.closeReason = closeReason;\n            return {requests};\n          });\n        }\n      },\n    );\n\n    WebSocketInterceptor.setSendCallback((data, socketId) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n\n      this.setState(({requests}) => {\n        const networkRequestInfo = requests[socketIndex];\n\n        if (!networkRequestInfo.messages) {\n          networkRequestInfo.messages = '';\n        }\n        networkRequestInfo.messages += 'Sent: ' + JSON.stringify(data) + '\\n';\n\n        return {requests};\n      });\n    });\n\n    WebSocketInterceptor.setOnMessageCallback((socketId, message) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n\n      this.setState(({requests}) => {\n        const networkRequestInfo = requests[socketIndex];\n\n        if (!networkRequestInfo.messages) {\n          networkRequestInfo.messages = '';\n        }\n        networkRequestInfo.messages +=\n          'Received: ' + JSON.stringify(message) + '\\n';\n\n        return {requests};\n      });\n    });\n\n    WebSocketInterceptor.setOnCloseCallback((socketId, message) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n\n      this.setState(({requests}) => {\n        const networkRequestInfo = requests[socketIndex];\n        networkRequestInfo.serverClose = message;\n\n        return {requests};\n      });\n    });\n\n    WebSocketInterceptor.setOnErrorCallback((socketId, message) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n\n      this.setState(({requests}) => {\n        const networkRequestInfo = requests[socketIndex];\n        networkRequestInfo.serverError = message;\n\n        return {requests};\n      });\n    });\n\n    // Fire above callbacks.\n    WebSocketInterceptor.enableInterception();\n  }\n\n  componentDidMount() {\n    this._enableXHRInterception();\n    this._enableWebSocketInterception();\n  }\n\n  componentWillUnmount() {\n    XHRInterceptor.disableInterception();\n    WebSocketInterceptor.disableInterception();\n  }\n\n  _renderItem = ({\n    item,\n    index,\n  }: RenderItemProps<NetworkRequestInfo>): React.MixedElement => {\n    const tableRowViewStyle = [\n      styles.tableRow,\n      index % 2 === 1 ? styles.tableRowOdd : styles.tableRowEven,\n      index === this.state.detailRowId && styles.tableRowPressed,\n    ];\n    const urlCellViewStyle = styles.urlCellView;\n    const methodCellViewStyle = styles.methodCellView;\n\n    return (\n      <TouchableHighlight\n        onPress={() => {\n          this._pressRow(index);\n        }}>\n        <View>\n          <View style={tableRowViewStyle}>\n            <View style={urlCellViewStyle}>\n              <Text style={styles.cellText} numberOfLines={1}>\n                {item.url}\n              </Text>\n            </View>\n            <View style={methodCellViewStyle}>\n              <Text style={styles.cellText} numberOfLines={1}>\n                {getTypeShortName(item.type)}\n              </Text>\n            </View>\n          </View>\n        </View>\n      </TouchableHighlight>\n    );\n  };\n\n  _renderItemDetail(id: number): React.Node {\n    const requestItem = this.state.requests[id];\n    const details = Object.keys(requestItem).map(key => {\n      if (key === 'id') {\n        return;\n      }\n      return (\n        <View style={styles.detailViewRow} key={key}>\n          <Text style={[styles.detailViewText, styles.detailKeyCellView]}>\n            {key}\n          </Text>\n          <Text style={[styles.detailViewText, styles.detailValueCellView]}>\n            {getStringByValue(requestItem[key])}\n          </Text>\n        </View>\n      );\n    });\n\n    return (\n      <View>\n        <TouchableHighlight\n          style={styles.closeButton}\n          onPress={this._closeButtonClicked}>\n          <View>\n            <Text style={styles.closeButtonText}>v</Text>\n          </View>\n        </TouchableHighlight>\n        <ScrollView\n          style={styles.detailScrollView}\n          ref={scrollRef => (this._detailScrollView = scrollRef)}>\n          {details}\n        </ScrollView>\n      </View>\n    );\n  }\n\n  _indicateAdditionalRequests = (): void => {\n    if (this._requestsListView) {\n      const distanceFromEndThreshold = LISTVIEW_CELL_HEIGHT * 2;\n      const {offset, visibleLength, contentLength} =\n        this._requestsListViewScrollMetrics;\n      const distanceFromEnd = contentLength - visibleLength - offset;\n      const isCloseToEnd = distanceFromEnd <= distanceFromEndThreshold;\n      if (isCloseToEnd) {\n        this._requestsListView.scrollToEnd();\n      } else {\n        this._requestsListView.flashScrollIndicators();\n      }\n    }\n  };\n\n  _captureRequestsListView = (listRef: ?FlatList<NetworkRequestInfo>): void => {\n    this._requestsListView = listRef;\n  };\n\n  _requestsListViewOnScroll = (e: Object): void => {\n    this._requestsListViewScrollMetrics.offset = e.nativeEvent.contentOffset.y;\n    this._requestsListViewScrollMetrics.visibleLength =\n      e.nativeEvent.layoutMeasurement.height;\n    this._requestsListViewScrollMetrics.contentLength =\n      e.nativeEvent.contentSize.height;\n  };\n\n  /**\n   * Popup a scrollView to dynamically show detailed information of\n   * the request, when pressing a row in the network flow listView.\n   */\n  _pressRow(rowId: number): void {\n    this.setState({detailRowId: rowId}, this._scrollDetailToTop);\n  }\n\n  _scrollDetailToTop = (): void => {\n    if (this._detailScrollView) {\n      this._detailScrollView.scrollTo({\n        y: 0,\n        animated: false,\n      });\n    }\n  };\n\n  _closeButtonClicked = () => {\n    this.setState({detailRowId: null});\n  };\n\n  _getRequestIndexByXHRID(index: number): number {\n    if (index === undefined) {\n      return -1;\n    }\n    const xhrIndex = this._xhrIdMap[index];\n    if (xhrIndex === undefined) {\n      return -1;\n    } else {\n      return xhrIndex;\n    }\n  }\n\n  render(): React.Node {\n    const {requests, detailRowId} = this.state;\n\n    return (\n      <View style={styles.container}>\n        {detailRowId != null && this._renderItemDetail(detailRowId)}\n        <View style={styles.listViewTitle}>\n          {requests.length > 0 && (\n            <View style={styles.tableRow}>\n              <View style={styles.urlTitleCellView}>\n                <Text style={styles.cellText} numberOfLines={1}>\n                  URL\n                </Text>\n              </View>\n              <View style={styles.methodTitleCellView}>\n                <Text style={styles.cellText} numberOfLines={1}>\n                  Type\n                </Text>\n              </View>\n            </View>\n          )}\n        </View>\n\n        <FlatList\n          ref={this._captureRequestsListView}\n          onScroll={this._requestsListViewOnScroll}\n          style={styles.listView}\n          data={requests}\n          renderItem={this._renderItem}\n          keyExtractor={keyExtractor}\n          extraData={this.state}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 10,\n    paddingBottom: 10,\n    paddingLeft: 5,\n    paddingRight: 5,\n  },\n  listViewTitle: {\n    height: 20,\n  },\n  listView: {\n    flex: 1,\n    height: 60,\n  },\n  tableRow: {\n    flexDirection: 'row',\n    flex: 1,\n    height: LISTVIEW_CELL_HEIGHT,\n  },\n  tableRowEven: {\n    backgroundColor: '#555',\n  },\n  tableRowOdd: {\n    backgroundColor: '#000',\n  },\n  tableRowPressed: {\n    backgroundColor: '#3B5998',\n  },\n  cellText: {\n    color: 'white',\n    fontSize: 12,\n  },\n  methodTitleCellView: {\n    height: 18,\n    borderColor: '#DCD7CD',\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderRightWidth: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#444',\n    flex: 1,\n  },\n  urlTitleCellView: {\n    height: 18,\n    borderColor: '#DCD7CD',\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    justifyContent: 'center',\n    backgroundColor: '#444',\n    flex: 5,\n    paddingLeft: 3,\n  },\n  methodCellView: {\n    height: 15,\n    borderColor: '#DCD7CD',\n    borderRightWidth: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1,\n  },\n  urlCellView: {\n    height: 15,\n    borderColor: '#DCD7CD',\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    justifyContent: 'center',\n    flex: 5,\n    paddingLeft: 3,\n  },\n  detailScrollView: {\n    flex: 1,\n    height: 180,\n    marginTop: 5,\n    marginBottom: 5,\n  },\n  detailKeyCellView: {\n    flex: 1.3,\n  },\n  detailValueCellView: {\n    flex: 2,\n  },\n  detailViewRow: {\n    flexDirection: 'row',\n    paddingHorizontal: 3,\n  },\n  detailViewText: {\n    color: 'white',\n    fontSize: 11,\n  },\n  closeButtonText: {\n    color: 'white',\n    fontSize: 10,\n  },\n  closeButton: {\n    marginTop: 5,\n    backgroundColor: '#888',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nmodule.exports = NetworkOverlay;\n"],"mappings":"AAUA,YAAY;;AAAC,IAAAA,YAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIb,MAAMC,UAAU,GAAGC,OAAO,CAAC,qCAAqC,CAAC;AACjE,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,4CAA4C,CAAC;AAChF,MAAME,IAAI,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AAC/C,MAAMG,QAAQ,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAC7C,MAAMI,cAAc,GAAGJ,OAAO,CAAC,2BAA2B,CAAC;AAC3D,MAAMK,UAAU,GAAGL,OAAO,CAAC,0BAA0B,CAAC;AACtD,MAAMM,IAAI,GAAGN,OAAO,CAAC,cAAc,CAAC;AACpC,MAAMO,oBAAoB,GAAGP,OAAO,CAAC,mCAAmC,CAAC;AACzE,MAAMQ,KAAK,GAAGR,OAAO,CAAC,OAAO,CAAC;AAE9B,MAAMS,oBAAoB,GAAG,EAAE;AAG/B,IAAIC,SAAS,GAAG,CAAC;AA8BjB,SAASC,gBAAgBA,CAACC,KAAU,EAAU;EAC5C,IAAIA,KAAK,KAAKC,SAAS,EAAE;IACvB,OAAO,WAAW;EACpB;EACA,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOE,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;EAC9B;EACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACI,MAAM,GAAG,GAAG,EAAE;IACnD,OAAOC,MAAM,CAACL,KAAK,CAAC,CACjBM,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CACbC,MAAM,CAAC,qCAAqC,CAAC;EAClD;EACA,OAAOP,KAAK;AACd;AAEA,SAASQ,gBAAgBA,CAACC,IAAS,EAAU;EAC3C,IAAIA,IAAI,KAAK,gBAAgB,EAAE;IAC7B,OAAO,KAAK;EACd,CAAC,MAAM,IAAIA,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO,IAAI;EACb;EAEA,OAAO,EAAE;AACX;AAEA,SAASC,YAAYA,CAACC,OAA2B,EAAU;EACzD,OAAON,MAAM,CAACM,OAAO,CAACC,EAAE,CAAC;AAC3B;AAKA,MAAMC,cAAc,SAASjB,KAAK,CAACkB,SAAS,CAAe;EAQzDC,8BAA8B,GAI1B;IACFC,MAAM,EAAE,CAAC;IACTC,aAAa,EAAE,CAAC;IAChBC,aAAa,EAAE;EACjB,CAAC;EAGDC,YAAY,GAAuB,CAAC,CAAC;EAErCC,SAAS,GAAiC,CAAC,CAAC;EAE5CC,KAAK,GAAU;IACbC,WAAW,EAAE,IAAI;IACjBC,QAAQ,EAAE;EACZ,CAAC;EAEDC,sBAAsBA,CAAA,EAAS;IAC7B,IAAIhC,cAAc,CAACiC,oBAAoB,CAAC,CAAC,EAAE;MACzC;IACF;IAEAjC,cAAc,CAACkC,eAAe,CAAC,CAACC,MAAM,EAAEC,GAAG,EAAEC,GAAG,KAAK;MAInDA,GAAG,CAACC,MAAM,GAAGhC,SAAS,EAAE;MACxB,MAAMiC,QAAQ,GAAG,IAAI,CAACV,KAAK,CAACE,QAAQ,CAACnB,MAAM;MAC3C,IAAI,CAACgB,SAAS,CAACS,GAAG,CAACC,MAAM,CAAC,GAAGC,QAAQ;MAErC,MAAMC,IAAwB,GAAG;QAC/BpB,EAAE,EAAEmB,QAAQ;QACZtB,IAAI,EAAE,gBAAgB;QACtBkB,MAAM,EAAEA,MAAM;QACdC,GAAG,EAAEA;MACP,CAAC;MACD,IAAI,CAACK,QAAQ,CACX;QACEV,QAAQ,EAAE,IAAI,CAACF,KAAK,CAACE,QAAQ,CAAChB,MAAM,CAACyB,IAAI;MAC3C,CAAC,EACD,IAAI,CAACE,2BACP,CAAC;IACH,CAAC,CAAC;IAEF1C,cAAc,CAAC2C,wBAAwB,CAAC,CAACC,MAAM,EAAEpC,KAAK,EAAE6B,GAAG,KAAK;MAC9D,MAAME,QAAQ,GAAG,IAAI,CAACM,uBAAuB,CAACR,GAAG,CAACC,MAAM,CAAC;MACzD,IAAIC,QAAQ,KAAK,CAAC,CAAC,EAAE;QACnB;MACF;MAEA,IAAI,CAACE,QAAQ,CAAC,CAAC;QAACV;MAAQ,CAAC,KAAK;QAC5B,MAAMe,kBAAkB,GAAGf,QAAQ,CAACQ,QAAQ,CAAC;QAC7C,IAAI,CAACO,kBAAkB,CAACC,cAAc,EAAE;UACtCD,kBAAkB,CAACC,cAAc,GAAI,CAAC,CAAgB;QACxD;QACAD,kBAAkB,CAACC,cAAc,CAACH,MAAM,CAAC,GAAGpC,KAAK;QACjD,OAAO;UAACuB;QAAQ,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF/B,cAAc,CAACgD,eAAe,CAAC,CAACC,IAAI,EAAEZ,GAAG,KAAK;MAC5C,MAAME,QAAQ,GAAG,IAAI,CAACM,uBAAuB,CAACR,GAAG,CAACC,MAAM,CAAC;MACzD,IAAIC,QAAQ,KAAK,CAAC,CAAC,EAAE;QACnB;MACF;MAEA,IAAI,CAACE,QAAQ,CAAC,CAAC;QAACV;MAAQ,CAAC,KAAK;QAC5B,MAAMe,kBAAkB,GAAGf,QAAQ,CAACQ,QAAQ,CAAC;QAC7CO,kBAAkB,CAACI,QAAQ,GAAGD,IAAI;QAClC,OAAO;UAAClB;QAAQ,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF/B,cAAc,CAACmD,yBAAyB,CACtC,CAAClC,IAAI,EAAEmC,IAAI,EAAEC,eAAe,EAAEhB,GAAG,KAAK;MACpC,MAAME,QAAQ,GAAG,IAAI,CAACM,uBAAuB,CAACR,GAAG,CAACC,MAAM,CAAC;MACzD,IAAIC,QAAQ,KAAK,CAAC,CAAC,EAAE;QACnB;MACF;MAEA,IAAI,CAACE,QAAQ,CAAC,CAAC;QAACV;MAAQ,CAAC,KAAK;QAC5B,MAAMe,kBAAkB,GAAGf,QAAQ,CAACQ,QAAQ,CAAC;QAC7CO,kBAAkB,CAACQ,mBAAmB,GAAGrC,IAAI;QAC7C6B,kBAAkB,CAACS,YAAY,GAAGH,IAAI;QACtCN,kBAAkB,CAACO,eAAe,GAAGA,eAAe;QACpD,OAAO;UAACtB;QAAQ,CAAC;MACnB,CAAC,CAAC;IACJ,CACF,CAAC;IAED/B,cAAc,CAACwD,mBAAmB,CAChC,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,YAAY,EAAExB,GAAG,KAAK;MAC7D,MAAME,QAAQ,GAAG,IAAI,CAACM,uBAAuB,CAACR,GAAG,CAACC,MAAM,CAAC;MACzD,IAAIC,QAAQ,KAAK,CAAC,CAAC,EAAE;QACnB;MACF;MAEA,IAAI,CAACE,QAAQ,CAAC,CAAC;QAACV;MAAQ,CAAC,KAAK;QAC5B,MAAMe,kBAAkB,GAAGf,QAAQ,CAACQ,QAAQ,CAAC;QAC7CO,kBAAkB,CAACW,MAAM,GAAGA,MAAM;QAClCX,kBAAkB,CAACY,OAAO,GAAGA,OAAO;QACpCZ,kBAAkB,CAACa,QAAQ,GAAGA,QAAQ;QACtCb,kBAAkB,CAACc,WAAW,GAAGA,WAAW;QAC5Cd,kBAAkB,CAACe,YAAY,GAAGA,YAAY;QAE9C,OAAO;UAAC9B;QAAQ,CAAC;MACnB,CAAC,CAAC;IACJ,CACF,CAAC;IAGD/B,cAAc,CAAC8D,kBAAkB,CAAC,CAAC;EACrC;EAEAC,4BAA4BA,CAAA,EAAS;IACnC,IAAI5D,oBAAoB,CAAC8B,oBAAoB,CAAC,CAAC,EAAE;MAC/C;IACF;IAEA9B,oBAAoB,CAAC6D,kBAAkB,CACrC,CAAC5B,GAAG,EAAE6B,SAAS,EAAEC,OAAO,EAAEC,QAAQ,KAAK;MACrC,MAAMC,WAAW,GAAG,IAAI,CAACvC,KAAK,CAACE,QAAQ,CAACnB,MAAM;MAC9C,IAAI,CAACe,YAAY,CAACwC,QAAQ,CAAC,GAAGC,WAAW;MACzC,MAAMC,UAA8B,GAAG;QACrCjD,EAAE,EAAEgD,WAAW;QACfnD,IAAI,EAAE,WAAW;QACjBmB,GAAG,EAAEA,GAAG;QACR6B,SAAS,EAAEA;MACb,CAAC;MACD,IAAI,CAACxB,QAAQ,CACX;QACEV,QAAQ,EAAE,IAAI,CAACF,KAAK,CAACE,QAAQ,CAAChB,MAAM,CAACsD,UAAU;MACjD,CAAC,EACD,IAAI,CAAC3B,2BACP,CAAC;IACH,CACF,CAAC;IAEDvC,oBAAoB,CAACmE,gBAAgB,CACnC,CAACC,UAAU,EAAEC,WAAW,EAAEL,QAAQ,KAAK;MACrC,MAAMC,WAAW,GAAG,IAAI,CAACzC,YAAY,CAACwC,QAAQ,CAAC;MAC/C,IAAIC,WAAW,KAAK3D,SAAS,EAAE;QAC7B;MACF;MACA,IAAI8D,UAAU,KAAK,IAAI,IAAIC,WAAW,KAAK,IAAI,EAAE;QAC/C,IAAI,CAAC/B,QAAQ,CAAC,CAAC;UAACV;QAAQ,CAAC,KAAK;UAC5B,MAAMe,kBAAkB,GAAGf,QAAQ,CAACqC,WAAW,CAAC;UAChDtB,kBAAkB,CAACW,MAAM,GAAGc,UAAU;UACtCzB,kBAAkB,CAAC0B,WAAW,GAAGA,WAAW;UAC5C,OAAO;YAACzC;UAAQ,CAAC;QACnB,CAAC,CAAC;MACJ;IACF,CACF,CAAC;IAED5B,oBAAoB,CAAC6C,eAAe,CAAC,CAACC,IAAI,EAAEkB,QAAQ,KAAK;MACvD,MAAMC,WAAW,GAAG,IAAI,CAACzC,YAAY,CAACwC,QAAQ,CAAC;MAC/C,IAAIC,WAAW,KAAK3D,SAAS,EAAE;QAC7B;MACF;MAEA,IAAI,CAACgC,QAAQ,CAAC,CAAC;QAACV;MAAQ,CAAC,KAAK;QAC5B,MAAMe,kBAAkB,GAAGf,QAAQ,CAACqC,WAAW,CAAC;QAEhD,IAAI,CAACtB,kBAAkB,CAAC2B,QAAQ,EAAE;UAChC3B,kBAAkB,CAAC2B,QAAQ,GAAG,EAAE;QAClC;QACA3B,kBAAkB,CAAC2B,QAAQ,IAAI,QAAQ,GAAG/D,IAAI,CAACC,SAAS,CAACsC,IAAI,CAAC,GAAG,IAAI;QAErE,OAAO;UAAClB;QAAQ,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF5B,oBAAoB,CAACuE,oBAAoB,CAAC,CAACP,QAAQ,EAAEQ,OAAO,KAAK;MAC/D,MAAMP,WAAW,GAAG,IAAI,CAACzC,YAAY,CAACwC,QAAQ,CAAC;MAC/C,IAAIC,WAAW,KAAK3D,SAAS,EAAE;QAC7B;MACF;MAEA,IAAI,CAACgC,QAAQ,CAAC,CAAC;QAACV;MAAQ,CAAC,KAAK;QAC5B,MAAMe,kBAAkB,GAAGf,QAAQ,CAACqC,WAAW,CAAC;QAEhD,IAAI,CAACtB,kBAAkB,CAAC2B,QAAQ,EAAE;UAChC3B,kBAAkB,CAAC2B,QAAQ,GAAG,EAAE;QAClC;QACA3B,kBAAkB,CAAC2B,QAAQ,IACzB,YAAY,GAAG/D,IAAI,CAACC,SAAS,CAACgE,OAAO,CAAC,GAAG,IAAI;QAE/C,OAAO;UAAC5C;QAAQ,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF5B,oBAAoB,CAACyE,kBAAkB,CAAC,CAACT,QAAQ,EAAEQ,OAAO,KAAK;MAC7D,MAAMP,WAAW,GAAG,IAAI,CAACzC,YAAY,CAACwC,QAAQ,CAAC;MAC/C,IAAIC,WAAW,KAAK3D,SAAS,EAAE;QAC7B;MACF;MAEA,IAAI,CAACgC,QAAQ,CAAC,CAAC;QAACV;MAAQ,CAAC,KAAK;QAC5B,MAAMe,kBAAkB,GAAGf,QAAQ,CAACqC,WAAW,CAAC;QAChDtB,kBAAkB,CAAC+B,WAAW,GAAGF,OAAO;QAExC,OAAO;UAAC5C;QAAQ,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF5B,oBAAoB,CAAC2E,kBAAkB,CAAC,CAACX,QAAQ,EAAEQ,OAAO,KAAK;MAC7D,MAAMP,WAAW,GAAG,IAAI,CAACzC,YAAY,CAACwC,QAAQ,CAAC;MAC/C,IAAIC,WAAW,KAAK3D,SAAS,EAAE;QAC7B;MACF;MAEA,IAAI,CAACgC,QAAQ,CAAC,CAAC;QAACV;MAAQ,CAAC,KAAK;QAC5B,MAAMe,kBAAkB,GAAGf,QAAQ,CAACqC,WAAW,CAAC;QAChDtB,kBAAkB,CAACiC,WAAW,GAAGJ,OAAO;QAExC,OAAO;UAAC5C;QAAQ,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;IAGF5B,oBAAoB,CAAC2D,kBAAkB,CAAC,CAAC;EAC3C;EAEAkB,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAAChD,sBAAsB,CAAC,CAAC;IAC7B,IAAI,CAAC+B,4BAA4B,CAAC,CAAC;EACrC;EAEAkB,oBAAoBA,CAAA,EAAG;IACrBjF,cAAc,CAACkF,mBAAmB,CAAC,CAAC;IACpC/E,oBAAoB,CAAC+E,mBAAmB,CAAC,CAAC;EAC5C;EAEAC,WAAW,GAAGA,CAAC;IACbC,IAAI;IACJC;EACmC,CAAC,KAAyB;IAC7D,MAAMC,iBAAiB,GAAG,CACxBC,MAAM,CAACC,QAAQ,EACfH,KAAK,GAAG,CAAC,KAAK,CAAC,GAAGE,MAAM,CAACE,WAAW,GAAGF,MAAM,CAACG,YAAY,EAC1DL,KAAK,KAAK,IAAI,CAACxD,KAAK,CAACC,WAAW,IAAIyD,MAAM,CAACI,eAAe,CAC3D;IACD,MAAMC,gBAAgB,GAAGL,MAAM,CAACM,WAAW;IAC3C,MAAMC,mBAAmB,GAAGP,MAAM,CAACQ,cAAc;IAEjD,OACErG,OAAA,CAACG,kBAAkB;MACjBmG,OAAO,EAAEA,CAAA,KAAM;QACb,IAAI,CAACC,SAAS,CAACZ,KAAK,CAAC;MACvB,CAAE;MAAAa,QAAA,EACFxG,OAAA,CAACI,IAAI;QAAAoG,QAAA,EACHxG,OAAA,CAACI,IAAI;UAACqG,KAAK,EAAEb,iBAAkB;UAAAY,QAAA,GAC7BxG,OAAA,CAACI,IAAI;YAACqG,KAAK,EAAEP,gBAAiB;YAAAM,QAAA,EAC5BxG,OAAA,CAACQ,IAAI;cAACiG,KAAK,EAAEZ,MAAM,CAACa,QAAS;cAACC,aAAa,EAAE,CAAE;cAAAH,QAAA,EAC5Cd,IAAI,CAAChD;YAAG;cAAAkE,QAAA,EAAA9G,YAAA;cAAA+G,UAAA;cAAAC,YAAA;YAAA,OACL;UAAC;YAAAF,QAAA,EAAA9G,YAAA;YAAA+G,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,EACP9G,OAAA,CAACI,IAAI;YAACqG,KAAK,EAAEL,mBAAoB;YAAAI,QAAA,EAC/BxG,OAAA,CAACQ,IAAI;cAACiG,KAAK,EAAEZ,MAAM,CAACa,QAAS;cAACC,aAAa,EAAE,CAAE;cAAAH,QAAA,EAC5ClF,gBAAgB,CAACoE,IAAI,CAACnE,IAAI;YAAC;cAAAqF,QAAA,EAAA9G,YAAA;cAAA+G,UAAA;cAAAC,YAAA;YAAA,OACxB;UAAC;YAAAF,QAAA,EAAA9G,YAAA;YAAA+G,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAF,QAAA,EAAA9G,YAAA;UAAA+G,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAF,QAAA,EAAA9G,YAAA;QAAA+G,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAF,QAAA,EAAA9G,YAAA;MAAA+G,UAAA;MAAAC,YAAA;IAAA,OACW,CAAC;EAEzB,CAAC;EAEDC,iBAAiBA,CAACrF,EAAU,EAAc;IACxC,MAAMsF,WAAW,GAAG,IAAI,CAAC7E,KAAK,CAACE,QAAQ,CAACX,EAAE,CAAC;IAC3C,MAAMuF,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC,CAACI,GAAG,CAACC,GAAG,IAAI;MAClD,IAAIA,GAAG,KAAK,IAAI,EAAE;QAChB;MACF;MACA,OACErH,OAAA,CAACI,IAAI;QAACqG,KAAK,EAAEZ,MAAM,CAACyB,aAAc;QAAAd,QAAA,GAChCxG,OAAA,CAACQ,IAAI;UAACiG,KAAK,EAAE,CAACZ,MAAM,CAAC0B,cAAc,EAAE1B,MAAM,CAAC2B,iBAAiB,CAAE;UAAAhB,QAAA,EAC5Da;QAAG;UAAAT,QAAA,EAAA9G,YAAA;UAAA+G,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,EACP9G,OAAA,CAACQ,IAAI;UAACiG,KAAK,EAAE,CAACZ,MAAM,CAAC0B,cAAc,EAAE1B,MAAM,CAAC4B,mBAAmB,CAAE;UAAAjB,QAAA,EAC9D3F,gBAAgB,CAACmG,WAAW,CAACK,GAAG,CAAC;QAAC;UAAAT,QAAA,EAAA9G,YAAA;UAAA+G,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC;MAAA,GAN+BO,GAAG;QAAAT,QAAA,EAAA9G,YAAA;QAAA+G,UAAA;QAAAC,YAAA;MAAA,OAOrC,CAAC;IAEX,CAAC,CAAC;IAEF,OACE9G,OAAA,CAACI,IAAI;MAAAoG,QAAA,GACHxG,OAAA,CAACG,kBAAkB;QACjBsG,KAAK,EAAEZ,MAAM,CAAC6B,WAAY;QAC1BpB,OAAO,EAAE,IAAI,CAACqB,mBAAoB;QAAAnB,QAAA,EAClCxG,OAAA,CAACI,IAAI;UAAAoG,QAAA,EACHxG,OAAA,CAACQ,IAAI;YAACiG,KAAK,EAAEZ,MAAM,CAAC+B,eAAgB;YAAApB,QAAA,EAAC;UAAC;YAAAI,QAAA,EAAA9G,YAAA;YAAA+G,UAAA;YAAAC,YAAA;UAAA,OAAM;QAAC;UAAAF,QAAA,EAAA9G,YAAA;UAAA+G,UAAA;UAAAC,YAAA;QAAA,OACzC;MAAC;QAAAF,QAAA,EAAA9G,YAAA;QAAA+G,UAAA;QAAAC,YAAA;MAAA,OACW,CAAC,EACrB9G,OAAA,CAACC,UAAU;QACTwG,KAAK,EAAEZ,MAAM,CAACgC,gBAAiB;QAC/BC,GAAG,EAAEC,SAAS,IAAK,IAAI,CAACC,iBAAiB,GAAGD,SAAW;QAAAvB,QAAA,EACtDS;MAAO;QAAAL,QAAA,EAAA9G,YAAA;QAAA+G,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAF,QAAA,EAAA9G,YAAA;MAAA+G,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC;EAEX;EAEA9D,2BAA2B,GAAGA,CAAA,KAAY;IACxC,IAAI,IAAI,CAACiF,iBAAiB,EAAE;MAC1B,MAAMC,wBAAwB,GAAGvH,oBAAoB,GAAG,CAAC;MACzD,MAAM;QAACmB,MAAM;QAAEC,aAAa;QAAEC;MAAa,CAAC,GAC1C,IAAI,CAACH,8BAA8B;MACrC,MAAMsG,eAAe,GAAGnG,aAAa,GAAGD,aAAa,GAAGD,MAAM;MAC9D,MAAMsG,YAAY,GAAGD,eAAe,IAAID,wBAAwB;MAChE,IAAIE,YAAY,EAAE;QAChB,IAAI,CAACH,iBAAiB,CAACI,WAAW,CAAC,CAAC;MACtC,CAAC,MAAM;QACL,IAAI,CAACJ,iBAAiB,CAACK,qBAAqB,CAAC,CAAC;MAChD;IACF;EACF,CAAC;EAEDC,wBAAwB,GAAIC,OAAsC,IAAW;IAC3E,IAAI,CAACP,iBAAiB,GAAGO,OAAO;EAClC,CAAC;EAEDC,yBAAyB,GAAIC,CAAS,IAAW;IAC/C,IAAI,CAAC7G,8BAA8B,CAACC,MAAM,GAAG4G,CAAC,CAACC,WAAW,CAACC,aAAa,CAACC,CAAC;IAC1E,IAAI,CAAChH,8BAA8B,CAACE,aAAa,GAC/C2G,CAAC,CAACC,WAAW,CAACG,iBAAiB,CAACC,MAAM;IACxC,IAAI,CAAClH,8BAA8B,CAACG,aAAa,GAC/C0G,CAAC,CAACC,WAAW,CAACK,WAAW,CAACD,MAAM;EACpC,CAAC;EAMDxC,SAASA,CAAC0C,KAAa,EAAQ;IAC7B,IAAI,CAAClG,QAAQ,CAAC;MAACX,WAAW,EAAE6G;IAAK,CAAC,EAAE,IAAI,CAACC,kBAAkB,CAAC;EAC9D;EAEAA,kBAAkB,GAAGA,CAAA,KAAY;IAC/B,IAAI,IAAI,CAAClB,iBAAiB,EAAE;MAC1B,IAAI,CAACA,iBAAiB,CAACmB,QAAQ,CAAC;QAC9BN,CAAC,EAAE,CAAC;QACJO,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF,CAAC;EAEDzB,mBAAmB,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAAC5E,QAAQ,CAAC;MAACX,WAAW,EAAE;IAAI,CAAC,CAAC;EACpC,CAAC;EAEDe,uBAAuBA,CAACwC,KAAa,EAAU;IAC7C,IAAIA,KAAK,KAAK5E,SAAS,EAAE;MACvB,OAAO,CAAC,CAAC;IACX;IACA,MAAM8B,QAAQ,GAAG,IAAI,CAACX,SAAS,CAACyD,KAAK,CAAC;IACtC,IAAI9C,QAAQ,KAAK9B,SAAS,EAAE;MAC1B,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACL,OAAO8B,QAAQ;IACjB;EACF;EAEAwG,MAAMA,CAAA,EAAe;IACnB,MAAM;MAAChH,QAAQ;MAAED;IAAW,CAAC,GAAG,IAAI,CAACD,KAAK;IAE1C,OACEnC,OAAA,CAACI,IAAI;MAACqG,KAAK,EAAEZ,MAAM,CAACyD,SAAU;MAAA9C,QAAA,GAC3BpE,WAAW,IAAI,IAAI,IAAI,IAAI,CAAC2E,iBAAiB,CAAC3E,WAAW,CAAC,EAC3DpC,OAAA,CAACI,IAAI;QAACqG,KAAK,EAAEZ,MAAM,CAAC0D,aAAc;QAAA/C,QAAA,EAC/BnE,QAAQ,CAACnB,MAAM,GAAG,CAAC,IAClBlB,OAAA,CAACI,IAAI;UAACqG,KAAK,EAAEZ,MAAM,CAACC,QAAS;UAAAU,QAAA,GAC3BxG,OAAA,CAACI,IAAI;YAACqG,KAAK,EAAEZ,MAAM,CAAC2D,gBAAiB;YAAAhD,QAAA,EACnCxG,OAAA,CAACQ,IAAI;cAACiG,KAAK,EAAEZ,MAAM,CAACa,QAAS;cAACC,aAAa,EAAE,CAAE;cAAAH,QAAA,EAAC;YAEhD;cAAAI,QAAA,EAAA9G,YAAA;cAAA+G,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAF,QAAA,EAAA9G,YAAA;YAAA+G,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,EACP9G,OAAA,CAACI,IAAI;YAACqG,KAAK,EAAEZ,MAAM,CAAC4D,mBAAoB;YAAAjD,QAAA,EACtCxG,OAAA,CAACQ,IAAI;cAACiG,KAAK,EAAEZ,MAAM,CAACa,QAAS;cAACC,aAAa,EAAE,CAAE;cAAAH,QAAA,EAAC;YAEhD;cAAAI,QAAA,EAAA9G,YAAA;cAAA+G,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAF,QAAA,EAAA9G,YAAA;YAAA+G,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAF,QAAA,EAAA9G,YAAA;UAAA+G,UAAA;UAAAC,YAAA;QAAA,OACH;MACP;QAAAF,QAAA,EAAA9G,YAAA;QAAA+G,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,EAEP9G,OAAA,CAACK,QAAQ;QACPyH,GAAG,EAAE,IAAI,CAACS,wBAAyB;QACnCmB,QAAQ,EAAE,IAAI,CAACjB,yBAA0B;QACzChC,KAAK,EAAEZ,MAAM,CAAC8D,QAAS;QACvBpG,IAAI,EAAElB,QAAS;QACfuH,UAAU,EAAE,IAAI,CAACnE,WAAY;QAC7BjE,YAAY,EAAEA,YAAa;QAC3BqI,SAAS,EAAE,IAAI,CAAC1H;MAAM;QAAAyE,QAAA,EAAA9G,YAAA;QAAA+G,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC;IAAA;MAAAF,QAAA,EAAA9G,YAAA;MAAA+G,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEX;AACF;AAEA,MAAMjB,MAAM,GAAGtF,UAAU,CAACuJ,MAAM,CAAC;EAC/BR,SAAS,EAAE;IACTS,UAAU,EAAE,EAAE;IACdC,aAAa,EAAE,EAAE;IACjBC,WAAW,EAAE,CAAC;IACdC,YAAY,EAAE;EAChB,CAAC;EACDX,aAAa,EAAE;IACbR,MAAM,EAAE;EACV,CAAC;EACDY,QAAQ,EAAE;IACRQ,IAAI,EAAE,CAAC;IACPpB,MAAM,EAAE;EACV,CAAC;EACDjD,QAAQ,EAAE;IACRsE,aAAa,EAAE,KAAK;IACpBD,IAAI,EAAE,CAAC;IACPpB,MAAM,EAAEpI;EACV,CAAC;EACDqF,YAAY,EAAE;IACZqE,eAAe,EAAE;EACnB,CAAC;EACDtE,WAAW,EAAE;IACXsE,eAAe,EAAE;EACnB,CAAC;EACDpE,eAAe,EAAE;IACfoE,eAAe,EAAE;EACnB,CAAC;EACD3D,QAAQ,EAAE;IACR4D,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE;EACZ,CAAC;EACDd,mBAAmB,EAAE;IACnBV,MAAM,EAAE,EAAE;IACVyB,WAAW,EAAE,SAAS;IACtBC,cAAc,EAAE,CAAC;IACjBC,iBAAiB,EAAE,CAAC;IACpBC,gBAAgB,EAAE,CAAC;IACnBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBR,eAAe,EAAE,MAAM;IACvBF,IAAI,EAAE;EACR,CAAC;EACDX,gBAAgB,EAAE;IAChBT,MAAM,EAAE,EAAE;IACVyB,WAAW,EAAE,SAAS;IACtBC,cAAc,EAAE,CAAC;IACjBC,iBAAiB,EAAE,CAAC;IACpBI,eAAe,EAAE,CAAC;IAClBH,gBAAgB,EAAE,CAAC;IACnBE,cAAc,EAAE,QAAQ;IACxBR,eAAe,EAAE,MAAM;IACvBF,IAAI,EAAE,CAAC;IACPF,WAAW,EAAE;EACf,CAAC;EACD5D,cAAc,EAAE;IACd0C,MAAM,EAAE,EAAE;IACVyB,WAAW,EAAE,SAAS;IACtBG,gBAAgB,EAAE,CAAC;IACnBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBV,IAAI,EAAE;EACR,CAAC;EACDhE,WAAW,EAAE;IACX4C,MAAM,EAAE,EAAE;IACVyB,WAAW,EAAE,SAAS;IACtBM,eAAe,EAAE,CAAC;IAClBH,gBAAgB,EAAE,CAAC;IACnBE,cAAc,EAAE,QAAQ;IACxBV,IAAI,EAAE,CAAC;IACPF,WAAW,EAAE;EACf,CAAC;EACDpC,gBAAgB,EAAE;IAChBsC,IAAI,EAAE,CAAC;IACPpB,MAAM,EAAE,GAAG;IACXgC,SAAS,EAAE,CAAC;IACZC,YAAY,EAAE;EAChB,CAAC;EACDxD,iBAAiB,EAAE;IACjB2C,IAAI,EAAE;EACR,CAAC;EACD1C,mBAAmB,EAAE;IACnB0C,IAAI,EAAE;EACR,CAAC;EACD7C,aAAa,EAAE;IACb8C,aAAa,EAAE,KAAK;IACpBa,iBAAiB,EAAE;EACrB,CAAC;EACD1D,cAAc,EAAE;IACd+C,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE;EACZ,CAAC;EACD3C,eAAe,EAAE;IACf0C,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE;EACZ,CAAC;EACD7C,WAAW,EAAE;IACXqD,SAAS,EAAE,CAAC;IACZV,eAAe,EAAE,MAAM;IACvBQ,cAAc,EAAE,QAAQ;IACxBD,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEFM,MAAM,CAACC,OAAO,GAAGxJ,cAAc","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"module","externalDependencies":[]}